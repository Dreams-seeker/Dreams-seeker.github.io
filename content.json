{"meta":{"title":"曾忆往昔","subtitle":null,"description":null,"author":"曹晗","url":"http://hanusers.gitee.io"},"pages":[{"title":"tags","date":"2018-03-23T10:08:25.000Z","updated":"2018-03-23T10:09:25.375Z","comments":true,"path":"tags/index.html","permalink":"http://hanusers.gitee.io/tags/index.html","excerpt":"","text":""},{"title":"关于我","date":"2018-03-23T10:12:29.000Z","updated":"2018-04-01T12:16:45.016Z","comments":true,"path":"about/index.html","permalink":"http://hanusers.gitee.io/about/index.html","excerpt":"","text":"一只不断学习的IT人，欢迎分享知识。作者:曹晗QQ号:1525629557 名人名言 没有人会为你的贫穷负责,却有人为你的富有而喝彩!所以不要活在别人的嘴巴里、做好自己！有路，就大胆的去走；有梦，就大胆的飞翔；若要成功，就要大胆去闯。大胆尝试才是信仰。不敢做，梦想就会变成幻想。前行的路，不怕万人阻挡，只怕自己投降；人生的帆，不怕狂风巨浪，只怕自己没胆量！天道酬勤，人道酬善，商道酬信，业道酬精！ –习近平 没有人会为你的贫穷负"}],"posts":[{"title":"自定义注解","slug":"annotation","date":"2018-07-17T09:51:41.000Z","updated":"2018-07-19T07:24:37.273Z","comments":true,"path":"2018/07/17/annotation/","link":"","permalink":"http://hanusers.gitee.io/2018/07/17/annotation/","excerpt":"","text":"JAVA中的注解以及自定义注解 什么是注解? 注解的用处? 注解的原理? 元注解? 常见标准的Annotation? 自定义注解? 自定义注解实例? 百度百科 注解基础知识点 定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。 作用分类： ①编写文档：通过代码里标识的元数据生成文档【生成文档doc文档】 ② 代码分析：通过代码里标识的元数据对代码进行分析【使用反射】 ③编译检查：通过代码里标识的元数据让编译器能够实现基本的编译检查【Override】 一、什么是注解?JAVA注解 Annotation(注解)是 JDK1.5 及以后版本引入的。中它可以用于创建文档，跟踪代码中的依赖性，甚至执行基本编译时检查。注解是以‘@注解名’在代码中存在的，根据注解参数的个数，我们可以将注解分为：标记注解、单值注解、完整注解三类。它们都不会直接影响到程序的语义，只是作为注解（标识）存在，我们可以通过反射机制编程实现对这些元数据（用来描述数据的数据）的访问。另外，你可以在编译时选择代码里的注解是否只存在于源代码级，或者它也能在class文件、或者运行时中出现（SOURCE/CLASS/RUNTIME）。 Annotation是JAVA5开始引入的一种新特征,中文名称叫做注解。它提供了一种安全的类似似注释的机制，用于将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联，为程序的元素（类、方法、成员变量）加上更直观更明了的说明，这些说明信息与程序的业务逻辑无关，并且供指定的工具或框架使用，Annontation像一种修饰符一样，应用于包、类型、构造方法，方法、成员变量、参数及本地变量的声明语句中。Java注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能，注解不会也不能影响代码的实际逻辑仅仅起到辅助的作用。包含java.lang.annotation包中。 二、注解的用处？ 1 .生成文档，这是最常见的，也是java最早提供的注解。常用的有@param @return等。 2 .跟踪代码依赖性，实现替代配置文件功能，比如Dagger2 依赖注入，未来java开发，将大量注解配置，具有很大好处。 3 .在编译时进行格式检查。如@override 放在方法前，如果你这个方法并不是覆盖了超类方法，则编译时就能检查出。 三、注解的原理? 注解的本质是一个继承了Annotation的特殊接口，其具体实现类是JAVA运行时生成的动态代理类。而我们通过反射获取注解时，返回的是Java运行时生成的动态代理对象$Proxy1。通过代理对象调用自定义注解（接口）的方法，会最终调用AnnotationInvocationHandler的invoke方法。该方法会从memberValues这个Map中索引出对应的值。而memberValues的来源是Java常量池。 四、元注解? java.lang.annotation提供了四种元注解，专门注解其他的注解（在自定义注解的时候，需要用到元注解）：@Documented 注解是否将包含在javaDoc中@Retention –什么时候使用该注解@Target –注解用于什么地方@Inherited – 是否允许子类继承该注解 1.）@Retention– 定义该注解的生命周期 ● RetentionPolicy.SOURCE : 在编译阶段丢弃。这些注解在编译结束之后就不再有任何意义，所以它们不会写入字节码。@Override, @SuppressWarnings都属于这类注解。 ● RetentionPolicy.CLASS : 在类加载的时候丢弃。在字节码文件的处理中有用。注解默认使用这种方式 ● RetentionPolicy.RUNTIME : 始终不会丢弃，运行期也保留该注解，因此可以使用反射机制读取该注解的信息。我们自定义的注解通常使用这种方式。 2.）Target – 表示该注解用于什么地方。默认值为任何元素，表示该注解用于什么地方。可用的ElementType参数包括 ● ElementType.CONSTRUCTOR:用于描述构造器 ● ElementType.FIELD:成员变量、对象、属性（包括enum实例） ● ElementType.LOCAL_VARIABLE:用于描述局部变量 ● ElementType.METHOD:用于描述方法 ● ElementType.PACKAGE:用于描述包 ● ElementType.PARAMETER:用于描述参数 ● ElementType.TYPE:用于描述类、接口(包括注解类型) 或enum声明 3.)@Documented–一个简单的Annotations标记注解，表示是否将注解信息添加在java文档中。 4.)@Inherited – 定义该注释和子类的关系 @Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。 五、常见标准的Annotation：1.）Override java.lang.Override是一个标记类型注解，它被用作标注方法。它说明了被标注的方法重载了父类的方法，起到了断言的作用。如果我们使用了这种注解在一个没有覆盖父类方法的方法时，java编译器将以一个编译错误来警示。 2.）Deprecated Deprecated也是一种标记类型注解。当一个类型或者类型成员使用@Deprecated修饰的话，编译器将不鼓励使用这个被标注的程序元素。所以使用这种修饰具有一定的“延续性”：如果我们在代码中通过继承或者覆盖的方式使用了这个过时的类型或者成员， 虽然继承或者覆盖后的类型或者成员并不是被声明为@Deprecated，但编译器仍然要报警。 3.)SuppressWarnings SuppressWarning不是一个标记类型注解。它有一个类型为String[]的成员，这个成员的值为被禁止的警告名。对于javac编译器来讲，被-Xlint选项有效的警告名也同样对@SuppressWarings有效，同时编译器忽略掉无法识别的警告名。 @SuppressWarnings(&quot;unchecked&quot;) 六、自定义注解?自定义注解类编写的一些规则: 1. Annotation型定义为@interface, 所有的Annotation会自动继承java.lang.Annotation这一接口,并且不能再去继承别的类或是接口. 2. 参数成员只能用public或默认(default)这两个访问权修饰 3. 参数成员只能用基本类型byte,short,char,int,long,float,double,boolean八种基本数据类型和String、Enum、Class、annotations等数据类型,以及这一些类型的数组. 4. 要获取类方法和字段的注解信息，必须通过Java的反射技术来获取 Annotation对象,因为你除此之外没有别的获取注解对象的方法 5. 注解也可以没有定义成员, 不过这样注解就没啥用了 PS:自定义注解需要使用到元注解 七、自定义注解实例？FruitName:java","categories":[],"tags":[{"name":"注解","slug":"注解","permalink":"http://hanusers.gitee.io/tags/注解/"}]},{"title":"SpringBoot","slug":"springboot","date":"2018-07-16T09:39:37.000Z","updated":"2018-07-18T06:52:02.859Z","comments":true,"path":"2018/07/16/springboot/","link":"","permalink":"http://hanusers.gitee.io/2018/07/16/springboot/","excerpt":"","text":"SpringBoot概述 Build Anything with Spring Boot：Spring Boot is the starting point for building all Spring-based applications.Spring Boot is designed to get you up and running as quickly as possible, with minimal upfront configuration of Spring. 上面是引自Spring官网的一段话，大概是说： Spring Boot 是所有基于 Spring 开发的项目的起点。Spring Boot 的设计是为了让你尽可能快的跑起来 Spring 应用程序并且尽可能减少你的配置文件。 追问一: SpringBoot是什么，它可以做什么? 在过去的两年时间里，最让人兴奋、回头率最高、最能改变游戏规则的东西，大概就是Spring Boot了。Spring Boot提供了一种新的编程范式，能在最小的阻力下开发Spring应用程序。有了它， 你可以更加敏捷地开发Spring应用程序，专注于应用程序的功能，不用在Spring的配置上多花功夫，甚至完全不用配置。实际上，Spring Boot的一项重要工作就是让Spring配置不再成为你成功路上的绊脚石。 搜狗百科 Spring Boot Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域（rapid application development）成为领导者 SpringBoot的一些解释SpringBoot与SpringMvc的关系:SpringBoot是SpringMvc的升级版，抛弃掉SpringMvc的大量的xml中的配置项. SpringBoot的一些特点. 1.化繁为简，简化配置. 2.备受关注,是下一代框架. 3.微服务的入门级微框架，（微服务:SpringCloud）Spring家族的微服务。Spring-Data-Jpa: JPA(java persistence API):定义了一系列对象持久化的标准，目前实现这一规范的产品有Hibernate TopLink等 SpringBoot项目整体结构图一:图二:","categories":[],"tags":[]},{"title":"习近平：中央和国家机关要做到三个表率一个模范","slug":"hexoImg","date":"2018-07-13T00:39:00.000Z","updated":"2018-07-16T08:05:49.738Z","comments":true,"path":"2018/07/13/hexoImg/","link":"","permalink":"http://hanusers.gitee.io/2018/07/13/hexoImg/","excerpt":"原标题：习近平：中央和国家机关要做到“三个表率，一个模范”[学习小组按]“坚持把党的政治建设摆在首位”","text":"原标题：习近平：中央和国家机关要做到“三个表率，一个模范”[学习小组按]“坚持把党的政治建设摆在首位”习近平在不久前的全国组织工作会议上强调。近日，习近平就对中央和国家机关推进党的政治建设作出了重要指示强调：中央和国家机关首先是政治机关，必须旗帜鲜明讲政治，坚定不移加强党的全面领导，坚持不懈推进党的政治建设。 对于中央和国家机关各级党组织和广大党员干部，要做到“三个表率，一个模范”： 在深入学习贯彻新时代中国特色社会主义思想上作表率； 在始终同党中央保持高度一致上作表率； 在坚决贯彻落实党中央各项决策部署上作表率； 建设让党中央放心、让人民群众满意的模范机关。中共中央总书记、国家主席、中央军委主席习近平近日对中央和国家机关推进党的政治建设作出重要指示强调，中央和国家机关首先是政治机关，必须旗帜鲜明讲政治，坚定不移加强党的全面领导，坚持不懈推进党的政治建设。希望中央和国家机关各级党组织和广大党员干部牢固树立“四个意识”，坚定“四个自信”，带头维护党中央权威和集中统一领导，在深入学习贯彻新时代中国特色社会主义思想上作表率，在始终同党中央保持高度一致上作表率，在坚决贯彻落实党中央各项决策部署上作表率，建设让党中央放心、让人民群众满意的模范机关。 习近平要求，中央和国家机关工委要强化统一领导中央和国家机关党的工作的政治担当，指导督促部委党组（党委）认真履行机关党建主体责任，以党的政治建设为统领，形成强大合力，推动全面从严治党各项举措落地见效，开创中央和国家机关党的建设和各项事业新局面。 中央和国家机关党的政治建设推进会12日在京召开。中共中央政治局委员、中央书记处书记、中央和国家机关工委书记丁薛祥在会上传达习近平总书记重要指示并讲话。 会议强调，中央和国家机关各单位要深入学习贯彻习近平新时代中国特色社会主义思想和党的十九大精神，牢固树立“四个意识”，带头坚决维护习近平总书记的核心地位、坚决维护党中央权威和集中统一领导，坚持正确政治方向，严守党的政治纪律和政治规矩，严肃党内政治生活，不折不扣贯彻落实党中央决策部署，做好“三个表率”，建设“模范机关”。要彰显政治统领，坚持问题导向，融入业务工作，健全制度机制，严格责任落实，把中央和国家机关党的政治建设抓细抓实抓出成效。会议还对做好党和国家机构改革期间思想政治工作等作出安排部署。 会上，8个部委党组（党委）负责同志作了交流发言，12个单位进行书面交流。中央和国家机关各单位机关党委书记、常务（专职）副书记和机关纪委书记参加会议。","categories":[],"tags":[{"name":"人民日报海外版","slug":"人民日报海外版","permalink":"http://hanusers.gitee.io/tags/人民日报海外版/"}]},{"title":"介绍Spring","slug":"20180712001","date":"2018-07-12T06:39:15.000Z","updated":"2018-07-16T07:59:37.675Z","comments":true,"path":"2018/07/12/20180712001/","link":"","permalink":"http://hanusers.gitee.io/2018/07/12/20180712001/","excerpt":"","text":"","categories":[],"tags":[{"name":"First","slug":"First","permalink":"http://hanusers.gitee.io/tags/First/"},{"name":"Second","slug":"Second","permalink":"http://hanusers.gitee.io/tags/Second/"}]}]}